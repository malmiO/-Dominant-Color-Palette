# -*- coding: utf-8 -*-
"""Review of Color detection application

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LVkKehCOi2U-3gtRh_M9xyDeeIZJMl_m
"""

!pip install opencv-python

import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from google.colab.patches import cv2_imshow

"""for upload the image"""

from google.colab import files
from io import BytesIO
from PIL import Image

"""Upload the image


Show up that image
"""

uploaded = files.upload()

for fn in uploaded.keys():
    img = Image.open(BytesIO(uploaded[fn]))
    img.save('uploaded_image.png')

img = cv2.imread('uploaded_image.png')
cv2_imshow(img)

"""Create a copy of the image"""

image_copy = img.copy()

"""Convert image to BGR to RBG format"""

image_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

"""Original image shape"""

img.shape

"""Reshape image to 2D array"""

image_reshaped = image_rgb.reshape((-1, 3))

image_reshaped.shape

"""Apply k-means clustering"""

k = 5
kmeans = KMeans(n_clusters=k)
kmeans.fit(image_reshaped)

"""Get cluster points.
(convert float to int)
"""

dominant_colors = kmeans.cluster_centers_.astype(int)

"""Display dominant colors"""

dominant_colors_img = np.zeros((100, 100 * k, 3), dtype=int)
for i in range(k):
    dominant_colors_img[:, i * 100:(i + 1) * 100, :] = dominant_colors[i]

"""Disply dominant colors"""

plt.figure(figsize=(10, 2))
plt.imshow(dominant_colors_img)
plt.title('Dominant Colors')
plt.axis('off')
plt.show()

"""------------------------------------------------------------------------------

Convert to HSV and show
"""

hsv_image = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

cv2_imshow(hsv_image)

reshaped_img = hsv_image.reshape((-1, 3))

k = 5
kmeans = KMeans(n_clusters=k)
kmeans.fit(image_reshaped)
dominant_colors = kmeans.cluster_centers_.astype(int)

dominant_colors_img = np.zeros((100, 100 * k, 3), dtype=int)
for i in range(k):
    dominant_colors_img[:, i * 100:(i + 1) * 100, :] = dominant_colors[i]

plt.figure(figsize=(10, 2))
plt.imshow(dominant_colors_img)
plt.title('Dominant Colors')
plt.axis('off')
plt.show()

"""RGB and HSV models differences"""

# Display the images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('RGB')
plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2HSV))
plt.title('HSV')
plt.tight_layout()
plt.show()

# Load the image
file = "/content/images (10).jpg"
image1 = cv2.imread(file)
cv2_imshow(image1)
image_display = image1.copy()

# Convert the image from BGR to HSV format
hsv = cv2.cvtColor(image1, cv2.COLOR_BGR2HSV)
reshaped = hsv.reshape((-1, 3))
cv2_imshow(hsv)

# Apply KMeans to find dominant colors
k = 5
kmeans = KMeans(n_clusters=k)
kmeans.fit(reshaped)
dominant_colors_palat = kmeans.cluster_centers_.astype(int)

# Create a square displaying the dominant colors
dominant_colors_img = np.zeros((100, 100 * k, 3), dtype=int)
for i in range(k):
    dominant_colors_img[:, i * 100:(i + 1) * 100, :] = dominant_colors[i]

# Display the dominant colors
plt.figure(figsize=(10, 2))
plt.imshow(dominant_colors_img)
plt.title('Dominant Colors')
plt.axis('off')
plt.show()

# Load the image
file = "/content/images (10).jpg"
image = cv2.imread(file)
cv2_imshow(image)
image_display = image.copy()

# Convert the image from BGR to RGB format
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image_reshaped = image_rgb.reshape((-1, 3))

# Apply KMeans to find dominant colors
k = 5
kmeans = KMeans(n_clusters=k)
kmeans.fit(image_reshaped)
dominant_colors = kmeans.cluster_centers_.astype(int)

# Create a square displaying the dominant colors
dominant_colors_img = np.zeros((100, 100 * k, 3), dtype=int)
for i in range(k):
    dominant_colors_img[:, i * 100:(i + 1) * 100, :] = dominant_colors[i]

# Display the dominant colors
plt.figure(figsize=(10, 2))
plt.imshow(dominant_colors_img)
plt.title('Dominant Colors')
plt.axis('off')
plt.show()